name: Rust CI

on:
  push:
    branches: [ "main", "master" ] # Adjust branch names if needed
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      # Fail fast if one OS fails, unless you need all results regardless
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    # Install hidapi development libraries and tools (Linux specific)
    - name: Install Linux dependencies (hidapi, udev, pkg-config)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -y
        # Install libudev-dev (provides libudev.pc), pkg-config (tool to find .pc files),
        # and libhidapi-dev (provides hidapi headers/library itself)
        sudo apt-get install -y libudev-dev pkg-config libhidapi-dev
      # Note: libhidapi-dev might pull in libudev-dev, but being explicit is safer.
      # pkg-config is definitely needed by the build script.

    # No specific system package install needed for Windows/macOS usually,
    # the hidapi crate's build script handles finding/linking system HID libraries.

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      # Consider adding OS to cache key if dependencies differ significantly,
      # although rust-cache often handles this well automatically.
      # with:
      #   key: ${{ runner.os }}-cargo

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings # Fail on warnings

    - name: Build library
      run: cargo build --verbose --all-features

    - name: Run unit tests
      # Skip ignored tests (hardware tests) by default in CI
      run: cargo test --verbose --all-features -- --skip ignored

    # Build examples (catches build errors in examples)
    - name: Build examples
      run: cargo build --examples --verbose --all-features

    # Integration tests are marked #[ignore] and require hardware, so they won't run here.
